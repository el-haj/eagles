# Generated by Django 5.2.3 on 2025-07-07 14:41

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('labs', '0002_lab_cooldown_minutes_lab_external_lab_id_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='LabRedirectSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_token', models.CharField(max_length=255, unique=True)),
                ('redirect_url', models.URLField(help_text='Full URL to redirect user to external lab')),
                ('return_url', models.URLField(help_text='URL where external lab should redirect back')),
                ('expires_at', models.DateTimeField(help_text='When this session expires')),
                ('is_used', models.BooleanField(default=False, help_text='Whether this session has been used')),
                ('ip_address', models.GenericIPAddressField(help_text='IP address that initiated the session')),
                ('user_agent', models.TextField(help_text='User agent that initiated the session')),
                ('used_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AlterModelOptions(
            name='lab',
            options={'ordering': ['-created_at']},
        ),
        migrations.AlterModelOptions(
            name='userlab',
            options={'ordering': ['-created_at']},
        ),
        migrations.RemoveField(
            model_name='lab',
            name='prize',
        ),
        migrations.RemoveField(
            model_name='lab',
            name='reward_points',
        ),
        migrations.AddField(
            model_name='lab',
            name='base_points',
            field=models.IntegerField(default=10, help_text='Base points awarded for passing this lab', validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AddField(
            model_name='lab',
            name='bonus_points',
            field=models.IntegerField(default=0, help_text='Additional bonus points for exceptional performance', validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AddField(
            model_name='lab',
            name='is_featured',
            field=models.BooleanField(default=False, help_text='Whether to feature this lab prominently'),
        ),
        migrations.AddField(
            model_name='lab',
            name='max_attempts_per_day',
            field=models.IntegerField(default=3, help_text='Maximum attempts allowed per day', validators=[django.core.validators.MinValueValidator(1)]),
        ),
        migrations.AddField(
            model_name='lab',
            name='min_score',
            field=models.IntegerField(default=70, help_text='Minimum score required to pass this lab', validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AddField(
            model_name='lab',
            name='perfect_score_bonus',
            field=models.IntegerField(default=0, help_text='Extra points awarded for achieving perfect score'),
        ),
        migrations.AddField(
            model_name='lab',
            name='prerequisite_labs',
            field=models.ManyToManyField(blank=True, help_text='Labs that must be completed before accessing this lab', to='labs.lab'),
        ),
        migrations.AddField(
            model_name='lab',
            name='requires_prerequisites',
            field=models.BooleanField(default=False, help_text='Whether this lab requires completing prerequisite labs'),
        ),
        migrations.AddField(
            model_name='lab',
            name='status',
            field=models.CharField(choices=[('draft', 'Draft'), ('active', 'Active'), ('maintenance', 'Under Maintenance'), ('deprecated', 'Deprecated')], default='active', max_length=15),
        ),
        migrations.AddField(
            model_name='lab',
            name='tags',
            field=models.JSONField(blank=True, default=list, help_text='Tags for categorization and search'),
        ),
        migrations.AddField(
            model_name='userlab',
            name='attempt_number',
            field=models.PositiveIntegerField(default=1, help_text='Sequential attempt number for this user-lab combination'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='userlab',
            name='base_points_earned',
            field=models.IntegerField(default=0, help_text='Base points earned for this attempt'),
        ),
        migrations.AddField(
            model_name='userlab',
            name='bonus_points_earned',
            field=models.IntegerField(default=0, help_text='Bonus points earned for this attempt'),
        ),
        migrations.AddField(
            model_name='userlab',
            name='external_session_token',
            field=models.CharField(blank=True, help_text='Session token for external system', max_length=500, null=True),
        ),
        migrations.AddField(
            model_name='userlab',
            name='ip_address',
            field=models.GenericIPAddressField(blank=True, help_text="User's IP address", null=True),
        ),
        migrations.AddField(
            model_name='userlab',
            name='is_passed',
            field=models.BooleanField(default=False, help_text='Whether the attempt passed the minimum score'),
        ),
        migrations.AddField(
            model_name='userlab',
            name='is_perfect_score',
            field=models.BooleanField(default=False, help_text='Whether user achieved perfect score'),
        ),
        migrations.AddField(
            model_name='userlab',
            name='max_possible_score',
            field=models.IntegerField(default=100, help_text='Max score possible at time of attempt'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='userlab',
            name='notes',
            field=models.TextField(blank=True, help_text='Additional notes about the attempt', null=True),
        ),
        migrations.AddField(
            model_name='userlab',
            name='redirect_token',
            field=models.CharField(blank=True, help_text='Secure token for lab redirection', max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='userlab',
            name='status',
            field=models.CharField(choices=[('started', 'Started'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('abandoned', 'Abandoned'), ('timeout', 'Timed Out')], default='started', max_length=15),
        ),
        migrations.AddField(
            model_name='userlab',
            name='total_points_earned',
            field=models.IntegerField(default=0, help_text='Total points earned for this attempt'),
        ),
        migrations.AddField(
            model_name='userlab',
            name='user_agent',
            field=models.TextField(blank=True, help_text='User agent string', null=True),
        ),
        migrations.AlterField(
            model_name='lab',
            name='category',
            field=models.CharField(choices=[('web_security', 'Web Security'), ('network_security', 'Network Security'), ('cryptography', 'Cryptography'), ('forensics', 'Digital Forensics'), ('reverse_engineering', 'Reverse Engineering'), ('penetration_testing', 'Penetration Testing'), ('malware_analysis', 'Malware Analysis'), ('incident_response', 'Incident Response'), ('compliance', 'Compliance & Governance'), ('cloud_security', 'Cloud Security'), ('mobile_security', 'Mobile Security'), ('iot_security', 'IoT Security'), ('other', 'Other')], max_length=30),
        ),
        migrations.AlterField(
            model_name='lab',
            name='cooldown_minutes',
            field=models.IntegerField(default=60, help_text='Cooldown time in minutes before user can retake the lab', validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AlterField(
            model_name='lab',
            name='difficulty_level',
            field=models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], max_length=15),
        ),
        migrations.AlterField(
            model_name='lab',
            name='estimated_time',
            field=models.IntegerField(help_text='Estimated completion time in minutes', validators=[django.core.validators.MinValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='lab',
            name='external_lab_id',
            field=models.CharField(default='default_lab', help_text='Unique ID used by the external lab system', max_length=255, unique=True),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='lab',
            name='lab_url',
            field=models.URLField(help_text='URL to the external lab environment'),
        ),
        migrations.AlterField(
            model_name='lab',
            name='max_score',
            field=models.IntegerField(default=100, help_text='Maximum score possible for this lab', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)]),
        ),
        migrations.AlterField(
            model_name='lab',
            name='notes',
            field=models.TextField(blank=True, help_text='Additional notes or instructions', null=True),
        ),
        migrations.AlterField(
            model_name='lab',
            name='objectives',
            field=models.TextField(help_text='Learning objectives and goals'),
        ),
        migrations.AlterField(
            model_name='userlab',
            name='ended_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='userlab',
            name='external_attempt_id',
            field=models.CharField(blank=True, help_text='Attempt ID from external lab system', max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='userlab',
            name='lab',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_attempts', to='labs.lab'),
        ),
        migrations.AlterField(
            model_name='userlab',
            name='score',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AlterField(
            model_name='userlab',
            name='time_spent',
            field=models.IntegerField(blank=True, help_text='Actual time spent in minutes', null=True),
        ),
        migrations.AlterField(
            model_name='userlab',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lab_attempts', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='lab',
            index=models.Index(fields=['category', 'difficulty_level'], name='labs_lab_categor_1fbde2_idx'),
        ),
        migrations.AddIndex(
            model_name='lab',
            index=models.Index(fields=['status', '-created_at'], name='labs_lab_status_7ffa33_idx'),
        ),
        migrations.AddIndex(
            model_name='lab',
            index=models.Index(fields=['is_featured', '-created_at'], name='labs_lab_is_feat_bb6f83_idx'),
        ),
        migrations.AddIndex(
            model_name='userlab',
            index=models.Index(fields=['user', 'lab', '-created_at'], name='labs_userla_user_id_b8daf1_idx'),
        ),
        migrations.AddIndex(
            model_name='userlab',
            index=models.Index(fields=['status', '-created_at'], name='labs_userla_status_53300c_idx'),
        ),
        migrations.AddIndex(
            model_name='userlab',
            index=models.Index(fields=['is_passed', '-created_at'], name='labs_userla_is_pass_a49dbe_idx'),
        ),
        migrations.AddIndex(
            model_name='userlab',
            index=models.Index(fields=['redirect_token'], name='labs_userla_redirec_7c874a_idx'),
        ),
        migrations.AddIndex(
            model_name='userlab',
            index=models.Index(fields=['external_attempt_id'], name='labs_userla_externa_4851df_idx'),
        ),
        migrations.AddField(
            model_name='labredirectsession',
            name='user_lab',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='redirect_session', to='labs.userlab'),
        ),
        migrations.RemoveField(
            model_name='userlab',
            name='is_ok',
        ),
        migrations.RemoveField(
            model_name='userlab',
            name='reward_points_earned',
        ),
        migrations.AddIndex(
            model_name='labredirectsession',
            index=models.Index(fields=['session_token'], name='labs_labred_session_ff6b65_idx'),
        ),
        migrations.AddIndex(
            model_name='labredirectsession',
            index=models.Index(fields=['expires_at'], name='labs_labred_expires_1bcf18_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userlab',
            unique_together={('user', 'lab', 'attempt_number')},
        ),
    ]
