# Generated by Django 5.2.3 on 2025-07-07 14:41

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='PointsReward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_type', models.CharField(choices=[('lab_completion', 'Lab Completion'), ('lab_perfect_score', 'Lab Perfect Score'), ('daily_login', 'Daily Login'), ('profile_completion', 'Profile Completion'), ('referral', 'User Referral'), ('event_participation', 'Event Participation'), ('community_contribution', 'Community Contribution'), ('achievement_unlock', 'Achievement Unlock'), ('store_purchase', 'Store Purchase'), ('premium_feature', 'Premium Feature'), ('certification', 'Certification'), ('admin_reward', 'Admin Reward'), ('other', 'Other')], max_length=30, unique=True)),
                ('points_amount', models.IntegerField(help_text='Points to award for this activity')),
                ('is_active', models.BooleanField(default=True)),
                ('description', models.TextField(blank=True)),
                ('max_per_day', models.IntegerField(blank=True, help_text='Maximum times per day this reward can be earned', null=True)),
                ('max_per_week', models.IntegerField(blank=True, help_text='Maximum times per week this reward can be earned', null=True)),
                ('max_total', models.IntegerField(blank=True, help_text='Maximum total times this reward can be earned', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['activity_type'],
            },
        ),
        migrations.RemoveField(
            model_name='user',
            name='cv_url',
        ),
        migrations.AddField(
            model_name='user',
            name='available_points',
            field=models.IntegerField(default=0, help_text='Points available to spend'),
        ),
        migrations.AddField(
            model_name='user',
            name='cv',
            field=models.FileField(blank=True, null=True, upload_to='user_cvs/'),
        ),
        migrations.AddField(
            model_name='user',
            name='total_points',
            field=models.IntegerField(default=0, help_text='Total points earned by user'),
        ),
        migrations.AlterField(
            model_name='user',
            name='profile_pic',
            field=models.ImageField(blank=True, null=True, upload_to='user_pics/'),
        ),
        migrations.CreateModel(
            name='PointsTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('earned', 'Points Earned'), ('spent', 'Points Spent'), ('bonus', 'Bonus Points'), ('penalty', 'Points Penalty'), ('refund', 'Points Refund'), ('admin_adjustment', 'Admin Adjustment')], max_length=20)),
                ('amount', models.IntegerField(help_text='Points amount (positive for earned, negative for spent)')),
                ('source', models.CharField(choices=[('lab_completion', 'Lab Completion'), ('lab_perfect_score', 'Lab Perfect Score'), ('daily_login', 'Daily Login'), ('profile_completion', 'Profile Completion'), ('referral', 'User Referral'), ('event_participation', 'Event Participation'), ('community_contribution', 'Community Contribution'), ('achievement_unlock', 'Achievement Unlock'), ('store_purchase', 'Store Purchase'), ('premium_feature', 'Premium Feature'), ('certification', 'Certification'), ('admin_reward', 'Admin Reward'), ('other', 'Other')], max_length=30)),
                ('description', models.TextField(blank=True, help_text='Additional details about the transaction')),
                ('related_object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('related_object_type', models.CharField(blank=True, help_text='Model name of related object', max_length=50, null=True)),
                ('balance_after', models.IntegerField(help_text="User's available points balance after this transaction")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_reversed', models.BooleanField(default=False, help_text='Whether this transaction has been reversed')),
                ('reversed_at', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_transactions', to=settings.AUTH_USER_MODEL)),
                ('reversed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reversed_transactions', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='points_transactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', '-created_at'], name='core_points_user_id_a1f873_idx'), models.Index(fields=['transaction_type', '-created_at'], name='core_points_transac_cd0e1b_idx'), models.Index(fields=['source', '-created_at'], name='core_points_source_c85464_idx')],
            },
        ),
    ]
