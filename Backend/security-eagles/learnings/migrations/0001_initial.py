# Generated by Django 5.2.3 on 2025-07-06 16:47

import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='LearningPath',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('short_description', models.CharField(help_text='Brief summary for listings', max_length=500)),
                ('level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], default='beginner', max_length=15)),
                ('category', models.CharField(choices=[('cyber', 'Cybersecurity'), ('infrastructure', 'Infrastructure'), ('software_engineering', 'Software Engineering')], max_length=20)),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='learning_paths/thumbnails/')),
                ('intro_video_url', models.URLField(blank=True, help_text='YouTube or other video URL', null=True)),
                ('estimated_duration_hours', models.PositiveIntegerField(help_text='Total estimated completion time')),
                ('prerequisites', models.TextField(blank=True)),
                ('learning_objectives', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, size=None)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived')], default='draft', max_length=10)),
                ('is_featured', models.BooleanField(default=False)),
                ('enrollment_count', models.PositiveIntegerField(default=0)),
                ('completion_count', models.PositiveIntegerField(default=0)),
                ('average_rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('total_ratings', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('instructor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_learning_paths', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-is_featured', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LearningSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('order', models.PositiveIntegerField(help_text='Order within the learning path')),
                ('content_type', models.CharField(choices=[('video', 'Video'), ('pdf', 'PDF Document'), ('markdown', 'Markdown Content'), ('quiz', 'Quiz'), ('assignment', 'Assignment')], max_length=15)),
                ('video_url', models.URLField(blank=True, help_text='YouTube or other video URL', null=True)),
                ('pdf_file', models.FileField(blank=True, null=True, upload_to='learning_sections/pdfs/')),
                ('markdown_content', models.TextField(blank=True, help_text='Markdown formatted content')),
                ('estimated_duration_minutes', models.PositiveIntegerField(help_text='Estimated completion time in minutes')),
                ('is_required', models.BooleanField(default=True, help_text='Required to complete the learning path')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('learning_path', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='learnings.learningpath')),
            ],
            options={
                'ordering': ['learning_path', 'order'],
            },
        ),
        migrations.CreateModel(
            name='LearningComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('is_edited', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='learnings.learningcomment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learning_comments', to=settings.AUTH_USER_MODEL)),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='learnings.learningsection')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Track',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('cyber', 'Cybersecurity'), ('infrastructure', 'Infrastructure'), ('software_engineering', 'Software Engineering')], max_length=20)),
                ('level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], default='beginner', max_length=15)),
                ('pdf_file', models.FileField(upload_to='tracks/pdfs/')),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='tracks/thumbnails/')),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, size=None)),
                ('duration_hours', models.PositiveIntegerField(help_text='Estimated completion time in hours')),
                ('prerequisites', models.TextField(blank=True, help_text='Required knowledge or skills')),
                ('is_active', models.BooleanField(default=True)),
                ('download_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['category', 'level'], name='learnings_t_categor_fc29c0_idx'), models.Index(fields=['is_active', 'category'], name='learnings_t_is_acti_fd42a0_idx')],
            },
        ),
        migrations.AddField(
            model_name='learningpath',
            name='track',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learning_paths', to='learnings.track'),
        ),
        migrations.CreateModel(
            name='UserLearningProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('paused', 'Paused')], default='not_started', max_length=15)),
                ('progress_percentage', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('enrolled_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('last_accessed_at', models.DateTimeField(auto_now=True)),
                ('completed_sections', models.ManyToManyField(blank=True, related_name='completed_by_users', to='learnings.learningsection')),
                ('current_section', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='learnings.learningsection')),
                ('learning_path', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_progress', to='learnings.learningpath')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learning_progress', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-last_accessed_at'],
            },
        ),
        migrations.CreateModel(
            name='LearningRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveIntegerField(help_text='Rating from 1 to 5 stars', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('review', models.TextField(blank=True, help_text='Optional written review')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('learning_path', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='learnings.learningpath')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learning_ratings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['learning_path', 'rating'], name='learnings_l_learnin_79cd24_idx'), models.Index(fields=['user', 'created_at'], name='learnings_l_user_id_27696a_idx')],
                'unique_together': {('learning_path', 'user')},
            },
        ),
        migrations.AddIndex(
            model_name='learningsection',
            index=models.Index(fields=['learning_path', 'order'], name='learnings_l_learnin_7151cb_idx'),
        ),
        migrations.AddIndex(
            model_name='learningsection',
            index=models.Index(fields=['learning_path', 'is_active'], name='learnings_l_learnin_3af915_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='learningsection',
            unique_together={('learning_path', 'order')},
        ),
        migrations.AddIndex(
            model_name='learningcomment',
            index=models.Index(fields=['section', 'is_active'], name='learnings_l_section_b1a11a_idx'),
        ),
        migrations.AddIndex(
            model_name='learningcomment',
            index=models.Index(fields=['user', 'created_at'], name='learnings_l_user_id_b683e1_idx'),
        ),
        migrations.AddIndex(
            model_name='learningpath',
            index=models.Index(fields=['status', 'category'], name='learnings_l_status_a762a0_idx'),
        ),
        migrations.AddIndex(
            model_name='learningpath',
            index=models.Index(fields=['level', 'category'], name='learnings_l_level_679951_idx'),
        ),
        migrations.AddIndex(
            model_name='learningpath',
            index=models.Index(fields=['is_featured', 'status'], name='learnings_l_is_feat_df689e_idx'),
        ),
        migrations.AddIndex(
            model_name='userlearningprogress',
            index=models.Index(fields=['user', 'status'], name='learnings_u_user_id_f8951d_idx'),
        ),
        migrations.AddIndex(
            model_name='userlearningprogress',
            index=models.Index(fields=['learning_path', 'status'], name='learnings_u_learnin_5eaa8d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userlearningprogress',
            unique_together={('user', 'learning_path')},
        ),
    ]
